{"version":3,"file":"component---src-templates-categories-js-0342b52ea14e71e9205c.js","mappings":"mMA8DA,IAnDgBA,IAAgF,IAA/E,KAAEC,EAAI,MAAEC,EAAK,KAAEC,EAAI,WAAEC,EAAU,YAAEC,EAAW,QAAEC,EAAO,KAAEC,EAAI,WAAEC,GAAYR,EACtF,MAAOS,EAAcC,GAAeF,EAAWG,MAAM,KAE/CC,EAAe,IAAOH,EACtBI,EAAc,IAAOL,EAE3B,OACIM,EAAAA,cAAA,WACIC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAETH,EAAAA,cAAA,cACIA,EAAAA,cAAA,OAAKC,UAAU,sBACdL,EACGI,EAAAA,cAAA,YACIA,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAIP,EAAiBQ,SAAS,QAAOC,EAAAA,EAAAA,GAAiBZ,IAC3D,MACDK,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAIN,EAAgBO,SAAS,QAAOC,EAAAA,EAAAA,GAAiBX,KAG/DI,EAAAA,cAAA,YACIA,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAIP,IAAkBS,EAAAA,EAAAA,GAAiBZ,MAKrDK,EAAAA,cAAA,UACIA,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAIlB,EAAMmB,SAAS,OACzBN,EAAAA,cAAA,QAAMM,SAAS,YAAYlB,KAG/BY,EAAAA,cAAA,OAAKC,UAAU,iBACXD,EAAAA,cAACQ,EAAAA,IAAmB,MAAG,IAACR,EAAAA,cAAA,YAAM,IAAEX,GAAY,MAAGW,EAAAA,cAACS,EAAAA,IAAO,MAAG,IAACT,EAAAA,cAAA,YAAOV,EAAW,OAIrFU,EAAAA,cAAA,eACIA,EAAAA,cAAA,KACAU,wBAAyB,CACrBC,OAAQpB,GAAeC,GAE3Bc,SAAS,iBAIbN,EAAAA,cAACY,EAAAA,EAAO,CAACnB,KAAMA,IACT,C,qECvDH,SAASmB,EAAO1B,GAAY,IAAX,KAAEO,GAAMP,EACpC,OACIc,EAAAA,cAAA,WACCP,EAAKoB,KAAI,CAACC,EAAKC,IACZf,EAAAA,cAAA,QAAMC,UAAU,MAAMe,IAAKD,GACvBf,EAAAA,cAAA,SAAIc,MAKpB,C,6GC2BA,UAjCyB5B,IAAsC,IAArC,KAAE+B,EAAI,SAAEC,EAAQ,YAAEC,GAAajC,EACrD,MAAME,EAAQ6B,EAAKG,KAAKC,aAAajC,MAC/BkC,EAAQL,EAAKM,kBAAkBC,MAErC,OACIxB,EAAAA,cAACyB,EAAAA,EAAM,CAACP,SAAUA,EAAU9B,MAAOA,GAC/BY,EAAAA,cAAA,WACKsB,EAAMT,KAAIa,IAAe,IAAd,KAAEC,GAAMD,EAChB,MAAM,MAAEtC,EAAK,KAAEC,EAAI,YAAEE,EAAW,KAAEE,EAAI,WAAEC,GAAeiC,EAAKC,aACtD,KAAEzC,GAASwC,EAAKE,QAChB,QAAErC,GAAYmC,EAAKnC,QACnBF,EAAaqC,EAAKrC,WAExB,OACIU,EAAAA,cAAA,OAAKgB,IAAK7B,GACNa,EAAAA,cAAC8B,EAAAA,EAAO,CACJ3C,KAAMA,EACNC,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZC,YAAaA,EACbC,QAASA,EACTC,KAAMA,EACNC,WAAYA,IAEd,KAIb,EAMV,MAAMqC,EAAOC,IAAsB,IAArB,YAAEb,GAAaa,EAChC,MAEMC,EAAa,IAFFd,EAAYe,SAASC,MAAM,GAAI,GAEd,UAElC,OACInC,EAAAA,cAACoC,EAAAA,EAAG,CAAChD,MAAO6C,GAAiB,C","sources":["webpack://gatsby-starter-jikoid/./src/components/Article/index.js","webpack://gatsby-starter-jikoid/./src/components/TagList/index.js","webpack://gatsby-starter-jikoid/./src/templates/categories.js"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\"\nimport TagList from \"../../components/TagList\"\nimport parsedCategories from \"../../utils/parsedCategories\"\n\nimport { GoClock } from \"react-icons/go\";\nimport { IoFolderOpenOutline } from \"react-icons/io5\";\n\nimport \"./Article.scss\"\n\n\nconst Article = ({ slug, title, date, timeToRead, description, excerpt, tags, categories }) => {\n    const [mainCategory, subCategory] = categories.split('/')\n\n    const mainCategoryUrl = `/${mainCategory}` \n    const subCategoryUrl = `/${categories}`\n\n    return (\n        <article\n            className=\"post_list_item\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n            >\n            <header>\n                <div className=\"article_categories\">\n                {subCategory ? \n                    <span>\n                        <Link to={mainCategoryUrl} itemProp=\"url\">{parsedCategories(mainCategory)}</Link>\n                        {\" ﹥ \"}\n                        <Link to={subCategoryUrl} itemProp=\"url\">{parsedCategories(subCategory)}</Link>\n                    </span>\n                :\n                    <span>\n                        <Link to={mainCategoryUrl}>{parsedCategories(mainCategory)}</Link>\n                    </span>\n                }\n                </div>\n                \n                <h2>\n                    <Link to={slug} itemProp=\"url\">\n                    <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                </h2>\n                <div className=\"acticle_utils\">\n                    <IoFolderOpenOutline /> <span> {date}</span> · <GoClock /> <span>{timeToRead}분</span>\n                </div>\n            </header>\n\n            <section>\n                <p\n                dangerouslySetInnerHTML={{\n                    __html: description || excerpt,\n                }}\n                itemProp=\"description\"\n                />\n            </section>\n\n            <TagList tags={tags}/>\n        </article>\n    )\n}\n\nexport default Article;","import * as React from \"react\"\nimport \"./TagList.scss\"\n\nexport default function TagList({ tags }) {\n    return (\n        <div>\n        {tags.map((tag, i) => (\n            <span className=\"tag\" key={i}>\n                <b>{tag}</b>\n            </span>\n        ))}\n        </div>\n    )\n}","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/Seo\"\nimport Article from \"../components/Article\"\n\nconst CategoryTemplate = ({ data, location, pageContext }) => {\n    const title = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n        <Layout location={location} title={title}>\n            <div>\n                {posts.map(({ node }) => {\n                    const { title, date, description, tags, categories } = node.frontmatter\n                    const { slug } = node.fields\n                    const { excerpt } = node.excerpt\n                    const timeToRead = node.timeToRead\n\n                    return (\n                        <div key={slug}>\n                            <Article \n                                slug={slug}\n                                title={title}\n                                date={date}\n                                timeToRead={timeToRead}\n                                description={description}\n                                excerpt={excerpt}\n                                tags={tags}\n                                categories={categories}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        </Layout>\n    )\n}\n\nexport default CategoryTemplate;\n\nexport const Head = ({ pageContext }) => {\n    const category = pageContext.category.slice(2, -1)\n    \n    const categoryTitle = `'${category}' Posts`\n\n    return (\n        <Seo title={categoryTitle} />\n    )\n}\n\nexport const pageQuery = graphql`\n    query Category($category: String!) {\n        site {\n            siteMetadata {\n                title\n                description\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { categories: { regex: $category } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    excerpt(pruneLength: 200)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"YYYY년 MM월 DD일\")\n                        title\n                        description\n                        categories\n                        tags\n                    }\n                    timeToRead\n                }\n            }\n        }\n    }\n`\n\n"],"names":["_ref","slug","title","date","timeToRead","description","excerpt","tags","categories","mainCategory","subCategory","split","mainCategoryUrl","subCategoryUrl","React","className","itemScope","itemType","Link","to","itemProp","parsedCategories","IoFolderOpenOutline","GoClock","dangerouslySetInnerHTML","__html","TagList","map","tag","i","key","data","location","pageContext","site","siteMetadata","posts","allMarkdownRemark","edges","Layout","_ref2","node","frontmatter","fields","Article","Head","_ref3","categoryTitle","category","slice","Seo"],"sourceRoot":""}